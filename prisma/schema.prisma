// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id String @id @default(uuid())
  email String @unique
  password String?
  profile Profile?
  blogs Blog[]
  comments Comment[]
  upvotes Upvote[]
  chats Chat[]
  messages Message[]
  unreadMessages UnreadMessage[]

  
}
model Profile{
  id String @id @default(uuid())
  name String
  user User @relation(fields: [userId], references: [id])
  userId  String @unique
  imageUrl String?
}
model Blog{
  id String @id @default(uuid())
  title String
  content String
  user User @relation(fields: [userId], references: [id])
  userId  String
  tags String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvotes Int @default(0)
  comments Comment[]
  upvotedBy Upvote[]

}
model Comment{
  id String @id @default(uuid())
  content String
  user User @relation(fields: [userId], references: [id])
  userId  String
  blog Blog @relation(fields: [blogId], references: [id])
  blogId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upvotes Int @default(0)
  upvotedBy Upvote[]
}
model Upvote {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String

  blog       Blog?      @relation(fields: [blogId], references: [id])
  blogId     String?

  comment    Comment?   @relation(fields: [commentId], references: [id])
  commentId  String?

  createdAt  DateTime   @default(now())

  @@unique([userId, blogId])
  @@unique([userId, commentId])
}

model Otp{
  id String @id @default(uuid())
  email String @unique
  otp String
  
  createdAt DateTime @default(now())
}
model Chat {
  id          String   @id @default(uuid())
  name        String?  // Optional field for group chat name
  createdAt   DateTime @default(now())

  participants User[]  // Many-to-many relationship for participants
  messages     Message[] // One-to-many relationship for messages
  unreadMessages UnreadMessage[] 
}
model Message {
  id        String   @id @default(uuid())
  content   String   // Content of the message
  senderId  String   // Sender's user ID
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String   // Associated chat ID
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model UnreadMessage {
  id        String   @id @default(uuid())
  userId    String   // User who has unread messages
  chatId    String   // Chat in which the user has unread messages
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
}

